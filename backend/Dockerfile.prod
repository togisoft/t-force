# Stage 1: Build stage
FROM rust:1.89-slim-bookworm AS builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy all source code
COPY . .

# Build the application
RUN cargo build --release --bin tforce

# Verify binary was created
RUN ls -la target/release/

# Stage 2: Runtime stage
FROM debian:bookworm-slim AS production

# Install runtime dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        libssl3 \
        libpq5 \
        ca-certificates \
        curl \
        dumb-init \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN groupadd -r tforce && \
    useradd -r -g tforce tforce && \
    mkdir -p /app/uploads /app/logs /app/templates && \
    chown -R tforce:tforce /app

WORKDIR /app

# Copy binary and templates
COPY --from=builder --chown=tforce:tforce /app/target/release/tforce ./tforce
COPY --from=builder --chown=tforce:tforce /app/templates ./templates

# Make binary executable
RUN chmod +x ./tforce && ls -la ./tforce

USER tforce

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

EXPOSE 8080

ENTRYPOINT ["dumb-init", "--"]
CMD ["./tforce"]