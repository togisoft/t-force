services:
  # Reverse Proxy - Simplified for local testing
  traefik:
    image: traefik:v2.10
    container_name: tforce-traefik-prod
    restart: unless-stopped
    ports:
      - "80:80"      # Single port for all services
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - "--api.insecure=true"  # Enable dashboard
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--log.level=DEBUG"    # More verbose logging for debugging
      - "--api.debug=true"
      - "--ping=true"
    networks:
      - tforce-network
    labels:
      - "traefik.enable=true"

  # Database with enhanced security
  db:
    image: postgres:16-alpine
    container_name: tforce-db-prod
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - tforce-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M


  # Backend with enhanced security and monitoring
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: tforce-backend-prod
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    env_file:
      - .env.prod
    depends_on:
      db:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: ${DATABASE_URL}
      
      # Server
      HOST: ${HOST:-0.0.0.0}
      PORT: ${PORT:-8080}
      RUST_LOG: ${RUST_LOG:-info}
      
      # Authentication
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      JWT_SECRET: ${JWT_SECRET}
      
      # OAuth
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      
      
      # Email
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      
      # Security
      CORS_ORIGIN: ${CORS_ORIGIN}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-900}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`) || Path(`/health`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.routers.backend.priority=10"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.no-cache-backend.headers.customResponseHeaders.Cache-Control=no-cache, no-store, must-revalidate"
      - "traefik.http.middlewares.no-cache-backend.headers.customResponseHeaders.Pragma=no-cache"
      - "traefik.http.middlewares.no-cache-backend.headers.customResponseHeaders.Expires=0"
      - "traefik.http.routers.backend.middlewares=no-cache-backend"
    networks:
      - tforce-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Frontend with enhanced security
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: tforce-frontend-prod
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    depends_on:
      - backend
    environment:
      # NextAuth
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      
      # OAuth
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      
      # API
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
      
      # Environment
      NODE_ENV: production
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://$(hostname -i):3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.middlewares.no-cache-frontend.headers.customResponseHeaders.Cache-Control=no-cache, no-store, must-revalidate"
      - "traefik.http.middlewares.no-cache-frontend.headers.customResponseHeaders.Pragma=no-cache"
      - "traefik.http.middlewares.no-cache-frontend.headers.customResponseHeaders.Expires=0"
      - "traefik.http.routers.frontend.middlewares=no-cache-frontend"
    networks:
      - tforce-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: tforce-prometheus-prod
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - tforce-network
    labels:
      - "traefik.enable=true"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:10.0.0
    container_name: tforce-grafana-prod
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - tforce-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.routers.grafana.entrypoints=web"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # Backup service
  backup:
    image: postgres:16-alpine
    container_name: tforce-backup-prod
    restart: "no"
    depends_on:
      - db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: ["/backup.sh"]
    networks:
      - tforce-network

volumes:
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  tforce-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 