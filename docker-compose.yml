services:
  traefik:
    image: traefik:v2.10
    container_name: tforce-traefik
    restart: always
    ports:
      - "80:80"      # Single port for all services
      - "8080:8080"  # Traefik dashboard (optional)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - "--api.insecure=true"  # Enable dashboard (disable in production)
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    networks:
      - tforce-network

  db:
    image: postgres:16-alpine
    container_name: tforce-db-prod
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - tforce-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tforce-backend-prod
    restart: always
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL}
      HOST: ${HOST}
      PORT: ${PORT}
      RUST_LOG: ${RUST_LOG}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
    # No direct port exposure - Traefik will handle this
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.services.backend.loadbalancer.server.port=8080"
    networks:
      - tforce-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tforce-frontend-prod
    restart: always
    depends_on:
      - backend
    environment:
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      # Use the internal API URL for container-to-container communication
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_INTERNAL_API_URL:-http://localhost/api}
    # No direct port exposure - Traefik will handle this
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      # Lower priority than backend so backend routes take precedence
      - "traefik.http.routers.frontend.priority=1"
    networks:
      - tforce-network

volumes:
  postgres_data:

networks:
  tforce-network:
    driver: bridge